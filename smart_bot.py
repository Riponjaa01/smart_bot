from telethon import TelegramClient, events, Button
from datetime import datetime
import asyncio
import random
import math
import requests

# тЬЕ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо рж╕рзЗржЯржЖржк
api_id = 14494254
api_hash = '3843d03e08b3c897cf7f14d3e5d2b885'
bot_token = '7867817430:AAGI2FxQtvwtqdlui3jk9ivv5ksITJOm8f8'

client = TelegramClient('signal_bot', api_id, api_hash).start(bot_token=bot_token)

# ЁЯУК ржЯрзНрж░рзЗржб ржкрзЗржпрж╝рж╛рж░ рж▓рж┐рж╕рзНржЯ
pairs = [
    'EUR/USD', 'GBP/JPY', 'USD/JPY', 'AUD/CAD', 'NZD/CHF',
    'EUR/GBP', 'USD/CAD', 'AUD/JPY', 'NZD/USD', 'CHF/JPY'
]

trades = ['ЁЯУИ Buy', 'ЁЯУЙ Sell']

entry_reasons = [
    "ЁЯХФ 5m ржХрзНржпрж╛ржирзНржбрзЗрж▓рзЗ ржмрзБрж▓рж┐рж╢ ржкрж┐ржиржмрж╛рж░ ржПржмржВ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА рж░рж┐ржнрж╛рж░рзНрж╕рж╛рж▓ ржжрзЗржЦрж╛ ржЧрзЗржЫрзЗред",
    "ЁЯФЯ 10m timeframe-ржП Breakout-ржПрж░ ржкрж░ рж░рж┐ржЯрзЗрж╕рзНржЯ рж╣ржпрж╝рзЗржЫрзЗред",
    "ЁЯХТ 15m ржХрзНржпрж╛ржирзНржбрзЗрж▓рзЗ EMA ржУ Fibonacci ржХржиржлрзНрж▓рзБрзЯрзЗржирзНрж╕рзЗ рж░рж┐ржЬрзЗржХрж╢ржи ржПрж╕рзЗржЫрзЗред",
    "ЁЯУР 10m RSI 70 ржерзЗржХрзЗ ржирж┐ржЪрзЗ ржирж╛ржоржЫрзЗ тАУ рж╕ржорзНржнрж╛ржмрзНржп рж░рж┐ржнрж╛рж░рзНрж╕рж╛рж▓ред",
    "ЁЯУК 15m ржХрзНржпрж╛ржирзНржбрзЗрж▓рзЗ рж╕рзБрж╕рзНржкрж╖рзНржЯ ржЯрзНрж░рзЗржирзНржб ржХржиржЯрж┐ржирж┐ржЙржпрж╝рзЗрж╢ржи рж╕рж┐ржЧржирзНржпрж╛рж▓ред",
    "ЁЯЯй 5m Support рж▓рзЗржнрзЗрж▓ ржерзЗржХрзЗ рж╢рж╛рж░рзНржк ржмрж╛ржЙржирзНрж╕ред",
    "ЁЯЯе 15m Bearish Engulfing ржжрзЗржЦрж╛ ржЧрзЗржЫрзЗ тАУ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА рж╕рзЗрж▓ рж╕рж┐ржЧржирзНржпрж╛рж▓ред"
]

risk_levels = ['ЁЯФТ High Probability Setup', 'ЁЯЯб Medium Confidence', 'тЪая╕П Aggressive Entry']
strategies = [
    'ЁЯУК Price Action (5m)',
    'ЁЯУР Fibonacci + EMA (10m)',
    'RSI Divergence (10m)',
    'Breakout Strategy (15m)',
    'Support/Resistance (5m)',
    'Trend Continuation (15m)'
]

user_selected_pairs = {}

# ЁЯЯй Binance ржерзЗржХрзЗ ржХрзНржпрж╛ржирзНржбрзЗрж▓ ржбрзЗржЯрж╛ ржЖржирж╛
BINANCE_API = "https://api.binance.com/api/v3/klines"

def get_binance_candles(symbol='EURUSDT', interval='1m', limit=50):
    url = f"{BINANCE_API}?symbol={symbol}&interval={interval}&limit={limit}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return [{
                'open': float(c[1]),
                'close': float(c[4]),
                'high': float(c[2]),
                'low': float(c[3])
            } for c in data]
        else:
            return []
    except:
        return []

def analyze_candles_for_signal(candles):
    if not candles or len(candles) < 2:
        return 'ЁЯУЙ Sell', 'ржбрзЗржЯрж╛ ржкрж░рзНржпрж╛ржкрзНржд ржиржпрж╝'
    
    last = candles[-2]
    curr = candles[-1]

    if curr['close'] > curr['open'] and curr['open'] > last['close']:
        return 'ЁЯУИ Buy', 'ржмрж░рзНрждржорж╛ржи ржХрзНржпрж╛ржирзНржбрзЗрж▓ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржмрзБрж▓рж┐рж╢ ржПржмржВ ржЖржЧрзЗрж░ ржХрзНржпрж╛ржирзНржбрзЗрж▓рзЗрж░ ржУржкрж░рзЗ ржХрзНрж▓рзЛржЬ рж╣ржпрж╝рзЗржЫрзЗ'
    elif curr['close'] < curr['open'] and curr['open'] < last['close']:
        return 'ЁЯУЙ Sell', 'ржмрж░рзНрждржорж╛ржи ржХрзНржпрж╛ржирзНржбрзЗрж▓ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржмрзЗржпрж╝рж╛рж░рж┐рж╢ ржПржмржВ ржЖржЧрзЗрж░ ржХрзНржпрж╛ржирзНржбрзЗрж▓рзЗрж░ ржирж┐ржЪрзЗ ржХрзНрж▓рзЛржЬ рж╣ржпрж╝рзЗржЫрзЗ'
    else:
        return random.choice(trades), 'рж╕рж╛ржзрж╛рж░ржг ржорзБржнржорзЗржирзНржЯрзЗрж░ ржоржзрзНржпрзЗ рж░ржпрж╝рзЗржЫрзЗ'

def log_user_signal(user_id, message, result=None):
    with open("signal_history.txt", "a", encoding='utf-8') as f:
        f.write(f"\nUSER: {user_id}\n{message}\nЁЯОп RESULT: {result}\n{'-'*30}\n")

def get_pair_buttons():
    button_list = []
    for i in range(0, len(pairs), 2):
        row = []
        for j in range(2):
            if i + j < len(pairs):
                row.append(Button.inline(pairs[i + j], f"PAIR_{pairs[i + j]}".encode()))
        button_list.append(row)
    button_list.append([Button.inline("ЁЯО▓ Random Pair", b"PAIR_RANDOM")])
    return button_list

@client.on(events.NewMessage(pattern='/getsignal'))
async def start(event):
    user_id = event.sender_id
    user_selected_pairs[user_id] = None
    await event.respond("ЁЯУК ржПржХржЯрж┐ ржЯрзНрж░рзЗржбрж┐ржВ ржкрзЗржпрж╝рж╛рж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:", buttons=get_pair_buttons())

@client.on(events.NewMessage(pattern='/stop'))
async def stop_signal(event):
    user_id = event.sender_id
    user_selected_pairs[user_id] = None
    await event.respond("ЁЯЫС рж╕рж┐ржЧржирзНржпрж╛рж▓ ржмржирзНржз ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ ржЖржмрж╛рж░ /getsignal ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред")

async def wait_until_next_candle_minus_5s(interval):
    now = datetime.now()
    total_seconds = now.minute * 60 + now.second
    next_candle = math.ceil(total_seconds / interval) * interval
    wait_seconds = next_candle - total_seconds - 5
    if wait_seconds < 0:
        wait_seconds += interval
    print(f"тП▒я╕П ржкрж░ржмрж░рзНрждрзА рж╕рж┐ржЧржирзНржпрж╛рж▓ ржЖрж╕ржЫрзЗ {wait_seconds} рж╕рзЗржХрзЗржирзНржб ржкрж░...")
    await asyncio.sleep(wait_seconds)

@client.on(events.CallbackQuery)
async def callback_handler(event):
    user_id = event.sender_id
    data = event.data.decode("utf-8")

    if data.startswith("PAIR_"):
        if data == "PAIR_RANDOM":
            selected_pair = random.choice(pairs)
        else:
            selected_pair = data.replace("PAIR_", "")

        user_selected_pairs[user_id] = selected_pair
        await event.edit(f"тЬЕ ржЖржкржирж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗржЫрзЗржи: **{selected_pair}**\n\nЁЯХТ ржорж╛рж░рзНржХрзЗржЯ ржкрж░рзНржпржмрзЗржХрзНрж╖ржг ржЪрж▓ржЫрзЗ...\nржкрзНрж░рждрж┐ ржХрзНржпрж╛ржирзНржбрзЗрж▓ рж╢рзБрж░рзБрж░ рзл рж╕рзЗржХрзЗржирзНржб ржЖржЧрзЗ рж╕рж┐ржЧржирзНржпрж╛рж▓ ржЖрж╕ржмрзЗред\n\nЁЯЫС ржмржирзНржз ржХрж░рждрзЗ `/stop` рж▓рж┐ржЦрзБржиред")

        while user_selected_pairs.get(user_id):
            await wait_until_next_candle_minus_5s(interval=60)

            symbol = selected_pair.replace("/", "") + "T"
            candle_data = get_binance_candles(symbol=symbol, interval="1m", limit=50)
            trade_signal, reason = analyze_candles_for_signal(candle_data)
            now = datetime.now().strftime('%I:%M %p')
            entry_price = candle_data[-1]['close'] if candle_data else 0

            signal_message = f"""ЁЯЪи **ржЯрзНрж░рзЗржб ржПржирж╛рж▓рж╛ржЗрж╕рж┐рж╕ рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ** ЁЯЪи
ЁЯТ▒ **ржкрзЗржпрж╝рж╛рж░:** {selected_pair}
ЁЯФБ **ржПржирзНржЯрзНрж░рж┐ ржЯрж╛ржЗржк:** {trade_signal}
ЁЯХТ **ржЯрж╛ржЗржо:** {now}
ЁЯза **ржПржирзНржЯрзНрж░рж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:**  
{reason}
тП▒я╕П *Trade Time: 1 Minute*
тЬЕ ржЧрзБржб рж▓рж╛ржХ ржЯрзНрж░рзЗржбрж╛рж░!
"""

            await client.send_message(user_id, signal_message)
            await asyncio.sleep(60)

            exit_candle = get_binance_candles(symbol=symbol, interval="1m", limit=2)
            exit_price = exit_candle[-1]['close'] if exit_candle else 0

            if trade_signal == 'ЁЯУИ Buy':
                result = "тЬЕ Win" if exit_price > entry_price else "тЭМ Loss"
            else:
                result = "тЬЕ Win" if exit_price < entry_price else "тЭМ Loss"

            await client.send_message(user_id, f"ЁЯОп **ржЯрзНрж░рзЗржб рж░рзЗржЬрж╛рж▓рзНржЯ**\nржПржирзНржЯрзНрж░рж┐: {entry_price}\nржПржХрзНрж╕рж┐ржЯ: {exit_price}\nЁЯУК ржлрж▓рж╛ржлрж▓: {result}")
            log_user_signal(user_id, signal_message, result)

print("ЁЯЪА XQ SIGNAL BOT ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗ...")
client.run_until_disconnected()
