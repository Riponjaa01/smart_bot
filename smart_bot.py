from telethon import TelegramClient, events, Button
from datetime import datetime
import asyncio
import random
import json
import websockets
import os

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
api_id = 14494254
api_hash = '3843d03e08b3c897cf7f14d3e5d2b885'
bot_token = '7867817430:AAGI2FxQtvwtqdlui3jk9ivv5ksITJOm8f8'

client = TelegramClient('signal_bot', api_id, api_hash).start(bot_token=bot_token)

# Deriv API ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
DERIV_API_TOKEN = 'cHiSjQqoP5GGQl3'  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Deriv API ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶®
DERIV_WS_URL = 'wss://ws.derivws.com/websockets/v3?app_id=1089'

# ‡¶ü‡ßç‡¶∞‡ßá‡¶° ‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü (Deriv-‡¶è‡¶∞ ‡¶´‡¶∞‡ßá‡¶ï‡ßç‡¶∏ ‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞)
pairs = [
    'EUR/USD', 'GBP/JPY', 'USD/JPY', 'AUD/CAD', 'NZD/CHF',
    'EUR/GBP', 'USD/CAD', 'AUD/JPY', 'NZD/USD', 'CHF/JPY'
]

# Deriv-‡¶è‡¶∞ ‡¶´‡¶∞‡ßá‡¶ï‡ßç‡¶∏ ‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç
pair_mapping = {
    'EUR/USD': 'frxEURUSD', 'GBP/JPY': 'frxGBPJPY', 'USD/JPY': 'frxUSDJPY',
    'AUD/CAD': 'frxAUDCAD', 'NZD/CHF': 'frxNZDCHF', 'EUR/GBP': 'frxEURGBP',
    'USD/CAD': 'frxUSDCAD', 'AUD/JPY': 'frxAUDJPY', 'NZD/USD': 'frxNZDUSD',
    'CHF/JPY': 'frxCHFJPY'
}

user_selected_pairs = {}

# Deriv ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡¶ø‡¶ï ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ
async def get_deriv_ticks(symbol, count=50):
    async with websockets.connect(DERIV_WS_URL) as ws:
        # API ‡¶Ö‡¶•‡ßá‡¶®‡¶ü‡¶ø‡¶ï‡ßá‡¶∂‡¶®
        auth_msg = {"authorize": DERIV_API_TOKEN}
        await ws.send(json.dumps(auth_msg))
        auth_response = json.loads(await ws.recv())
        if 'error' in auth_response:
            print("Deriv API Error:", auth_response['error']['message'])
            return None

        # ‡¶ü‡¶ø‡¶ï ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü
        tick_msg = {
            "ticks_history": symbol,
            "end": "latest",
            "count": count,
            "style": "ticks"
        }
        await ws.send(json.dumps(tick_msg))
        tick_response = json.loads(await ws.recv())
        if 'error' in tick_response:
            print("Deriv Tick Error:", tick_response['error']['message'])
            return None

        # ‡¶ü‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶∏ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π
        prices = tick_response.get('history', {}).get('prices', [])
        return prices

# SMA ‡¶ó‡¶£‡¶®‡¶æ
def calculate_sma(prices, period):
    if len(prices) < period:
        return [0] * len(prices)
    sma = []
    for i in range(len(prices)):
        if i < period - 1:
            sma.append(0)
        else:
            sma.append(sum(prices[i-period+1:i+1]) / period)
    return sma

# SMA ‡¶ï‡ßç‡¶∞‡¶∏‡¶ì‡¶≠‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£
def analyze_candles_for_signal(prices):
    if not prices:
        return random.choice(['üìà Call', 'üìâ Put']), "‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø, ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤‡•§"

    # SMA ‡¶ó‡¶£‡¶®‡¶æ
    sma5 = calculate_sma(prices, 5)
    sma20 = calculate_sma(prices, 20)

    last_sma5 = sma5[-1] if len(sma5) > 0 else 0
    last_sma20 = sma20[-1] if len(sma20) > 0 else 0
    prev_sma5 = sma5[-2] if len(sma5) > 1 else 0
    prev_sma20 = sma20[-2] if len(sma20) > 1 else 0

    signal = None
    reason = ""

    # SMA ‡¶ï‡ßç‡¶∞‡¶∏‡¶ì‡¶≠‡¶æ‡¶∞
    if prev_sma5 < prev_sma20 and last_sma5 > last_sma20:
        signal = "üìà Call"
        reason += "SMA5 ‡¶ï‡ßç‡¶∞‡¶∏ ‡¶ï‡¶∞‡ßá SMA20 ‡¶â‡¶™‡¶∞‡ßá ‡¶â‡¶†‡ßá‡¶õ‡ßá‡•§ "
    elif prev_sma5 > prev_sma20 and last_sma5 < last_sma20:
        signal = "üìâ Put"
        reason += "SMA5 ‡¶®‡¶ø‡¶ö‡ßá ‡¶ï‡ßç‡¶∞‡¶∏ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá SMA20‡•§ "

    if not signal:
        signal = random.choice(['üìà Call', 'üìâ Put'])
        reason = "‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤‡•§"

    return signal, reason

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶≤‡¶ó
def log_user_signal(user_id, signal_text, result_text=None):
    folder = "user_logs"
    os.makedirs(folder, exist_ok=True)
    filepath = os.path.join(folder, f"{user_id}.txt")
    with open(filepath, "a", encoding="utf-8") as f:
        f.write(f"{datetime.now()} - ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤:\n{signal_text}\n")
        if result_text:
            f.write(f"{datetime.now()} - ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:\n{result_text}\n\n")

# ‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø
def get_pair_buttons():
    button_list = []
    for i in range(0, len(pairs), 2):
        row = []
        for j in range(2):
            if i + j < len(pairs):
                row.append(Button.inline(pairs[i + j], f"PAIR_{pairs[i + j]}".encode()))
        button_list.append(row)
    button_list.append([Button.inline("üé≤ Random Pair", b"PAIR_RANDOM")])
    return button_list

# ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async def quick_signal_wait():
    wait_seconds = random.uniform(2, 10)
    print(f"‚è±Ô∏è ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶Ü‡¶∏‡¶õ‡ßá {wait_seconds:.2f} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞...")
    await asyncio.sleep(wait_seconds)

# ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Deriv API ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá)
async def analyze_signal_result(symbol, entry_price, trade_type, duration=60):
    async with websockets.connect(DERIV_WS_URL) as ws:
        # ‡¶Ö‡¶•‡ßá‡¶®‡¶ü‡¶ø‡¶ï‡ßá‡¶∂‡¶®
        auth_msg = {"authorize": DERIV_API_TOKEN}
        await ws.send(json.dumps(auth_msg))
        await ws.recv()

        # ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶∏ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡¶ø‡¶ï ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®
        tick_msg = {"ticks": symbol, "subscribe": 1}
        await ws.send(json.dumps(tick_msg))

        # ‡ß¨‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ
        start_time = asyncio.get_event_loop().time()
        latest_price = entry_price
        while asyncio.get_event_loop().time() - start_time < duration:
            response = json.loads(await ws.recv())
            if 'tick' in response:
                latest_price = response['tick']['quote']
            await asyncio.sleep(1)

        # ‡¶ü‡¶ø‡¶ï ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß
        unsubscribe_msg = {"forget": response.get('subscription', {}).get('id', '')}
        await ws.send(json.dumps(unsubscribe_msg))

        close_price = latest_price

        if trade_type == "üìà Call":
            if close_price > entry_price:
                result = "‚úÖ ‡¶≤‡¶æ‡¶≠"
                profit = close_price - entry_price
            else:
                result = "‚ùå ‡¶≤‡¶∏"
                profit = close_price - entry_price
        elif trade_type == "üìâ Put":
            if close_price < entry_price:
                result = "‚úÖ ‡¶≤‡¶æ‡¶≠"
                profit = entry_price - close_price
            else:
                result = "‚ùå ‡¶≤‡¶∏"
                profit = entry_price - close_price

        result_message = f"üìä **‡¶ü‡ßç‡¶∞‡ßá‡¶° ‡¶´‡¶≤‡¶æ‡¶´‡¶≤** üìä\n\nüí± ‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞: {symbol.replace('frx', '')}\nüîÅ ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶ü‡¶æ‡¶á‡¶™: {trade_type}\nüíµ ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶∏: {entry_price}\nüí∏ ‡¶ï‡ßç‡¶≤‡ßã‡¶ú ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶∏: {close_price}\nüìà ‡¶´‡¶≤‡¶æ‡¶´‡¶≤: {result}\nüí∞ ‡¶™‡¶ø‡¶™‡¶∏: {profit:.4f}"
        return result_message, result

# /getsignal ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@client.on(events.NewMessage(pattern='/getsignal'))
async def start(event):
    user_id = event.sender_id
    user_selected_pairs[user_id] = None
    await event.respond("üìä ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ç ‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:", buttons=get_pair_buttons())

# ‡¶¨‡¶æ‡¶ü‡¶® ‡¶™‡ßç‡¶∞‡ßá‡¶∏ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
@client.on(events.CallbackQuery)
async def callback_handler(event):
    user_id = event.sender_id
    data = event.data.decode("utf-8")

    if data.startswith("PAIR_"):
        if data == "PAIR_RANDOM":
            selected_pair = random.choice(pairs)
        else:
            selected_pair = data.replace("PAIR_", "")
        user_selected_pairs[user_id] = selected_pair
        
        await event.edit(f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®: **{selected_pair}**\n\nüïí ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶™‡¶∞‡ßç‡¶Ø‡¶¨‡ßá‡¶ï‡ßç‡¶∑‡¶£ ‡¶ö‡¶≤‡¶õ‡ßá...")
        await event.respond("‚è≥ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶¨‡ßá‡•§")

        await quick_signal_wait()

        symbol = pair_mapping.get(selected_pair, 'frxEURUSD')
        tick_data = await get_deriv_ticks(symbol, count=50)

        trade_signal, reason = analyze_candles_for_signal(tick_data)

        entry_price = tick_data[-1] if tick_data else None

        now = datetime.now().strftime('%I:%M %p')

        signal_message = f"""üö® **‡¶ü‡ßç‡¶∞‡ßá‡¶° ‡¶è‡¶®‡¶æ‡¶≤‡¶æ‡¶á‡¶∏‡¶ø‡¶∏ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá** üö®

üí± ‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞: {selected_pair}
üîÅ ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶ü‡¶æ‡¶á‡¶™: {trade_signal}
üïí ‡¶ü‡¶æ‡¶á‡¶Æ: {now}
üß† ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£:
{reason}
‚è±Ô∏è Trade Time: 1 Minute
‚úÖ ‡¶ó‡ßÅ‡¶° ‡¶≤‡¶æ‡¶ï ‡¶ü‡ßç‡¶∞‡ßá‡¶°‡¶æ‡¶∞!
"""

        log_user_signal(user_id, signal_message)
        await event.respond(signal_message)

        if entry_price:
            result_message, result = await analyze_signal_result(symbol, entry_price, trade_signal)
            log_user_signal(user_id, signal_message, result_message)
            await event.respond(result_message)

# /history ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@client.on(events.NewMessage(pattern='/history'))
async def show_history(event):
    user_id = event.sender_id
    filepath = os.path.join("user_logs", f"{user_id}.txt")
    if os.path.exists(filepath):
        with open(filepath, "r", encoding="utf-8") as f:
            history = f.read()
        await event.respond(f"üìú **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßç‡¶∞‡ßá‡¶° ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø**:\n\n{history}")
    else:
        await event.respond("‚ö†Ô∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ
print("üöÄ XQ SIGNAL BOT ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá...")
client.run_until_disconnected()
